<policies>
    <inbound>
        <base />
        <!-- Validate Azure AD JWT token -->
        <!-- <validate-jwt header-name="Authorization" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true">
            <openid-config url="https://login.microsoftonline.com/{tenant-id}/v2.0/.well-known/openid-configuration" />
        </validate-jwt>
         -->
        <validate-azure-ad-token tenant-id="{tenant-id}">
            <!-- <client-application-ids>
                <application-id>Azure AD application/client ID</application-id>
            </client-application-ids> -->
            <audiences>
                <!-- <audience>{audience}</audience> -->
                <!-- if there are multiple possible audiences, then add additional audience elements -->
                <audience>https://cognitiveservices.azure.com</audience>
            </audiences>
            <required-claims>
                <claim name="groups" match="any">
                    <value>{entra-group-id}</value>
                    <!-- if there is more than one allowed value, then add additional value elements -->
                </claim>
            </required-claims>
        </validate-azure-ad-token>

        <!-- Get managed identity token for backend authentication -->
        <authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" />
        <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value>
        </set-header>
        <set-backend-service backend-id="{backend-id}" />
    </inbound>
    <backend>
        <!--Set count to one less than the number of backends in the pool to try all backends until the backend pool is temporarily unavailable.-->
        <retry count="2" interval="0" first-fast-retry="true" condition="@(context.Response.StatusCode == 429 || context.Response.StatusCode == 503)">
            <forward-request buffer-request-body="true" />
        </retry>
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <choose>
            <!-- Handle JWT validation errors -->
            <when condition="@(context.Response.StatusCode == 401)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-body>{"error": "Invalid or missing Azure AD token"}</set-body>
                </return-response>
            </when>
            <!--Return a generic error that does not reveal backend pool details.-->
            <when condition="@(context.Response.StatusCode == 503)">
                <return-response>
                    <set-status code="503" reason="Service Unavailable" />
                </return-response>
            </when>
        </choose>
    </on-error>
</policies>
