{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "2959590565743213302"
    }
  },
  "parameters": {
    "enableAppGateway": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Gateway deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for Application Gateway"
      }
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway name"
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Subnet resource ID for Application Gateway"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    },
    "appGatewaySku": {
      "type": "string",
      "defaultValue": "WAF_v2",
      "allowedValues": [
        "Standard_v2",
        "WAF_v2"
      ],
      "metadata": {
        "description": "Application Gateway SKU"
      }
    },
    "appGatewayTier": {
      "type": "string",
      "defaultValue": "WAF_v2",
      "allowedValues": [
        "Standard_v2",
        "WAF_v2"
      ],
      "metadata": {
        "description": "Application Gateway tier"
      }
    },
    "capacity": {
      "type": "object",
      "defaultValue": {
        "minCapacity": 1,
        "maxCapacity": 10
      },
      "metadata": {
        "description": "Application Gateway capacity configuration"
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "Availability zones for Application Gateway"
      }
    },
    "publicIpResourceId": {
      "type": "string",
      "metadata": {
        "description": "Public IP resource ID for frontend"
      }
    },
    "privateFrontendIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Private IP address for private frontend (optional)"
      }
    },
    "enablePrivateFrontend": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable private frontend IP configuration"
      }
    },
    "backendPools": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default-backend-pool",
          "fqdns": [],
          "ipAddresses": []
        }
      ],
      "metadata": {
        "description": "Backend pools configuration"
      }
    },
    "backendHttpSettings": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default-http-setting",
          "port": 80,
          "protocol": "Http",
          "cookieBasedAffinity": "Disabled",
          "requestTimeout": 30,
          "connectionDraining": {
            "enabled": true,
            "drainTimeoutInSec": 300
          },
          "pickHostNameFromBackendAddress": false,
          "hostName": "",
          "path": "",
          "trustedRootCertificateNames": [],
          "authenticationCertificateNames": []
        }
      ],
      "metadata": {
        "description": "Backend HTTP settings configuration"
      }
    },
    "sslCertificates": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "SSL certificates configuration"
      }
    },
    "trustedRootCertificates": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Trusted root certificates configuration"
      }
    },
    "trustedClientCertificates": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Trusted client certificates configuration"
      }
    },
    "sslProfiles": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "SSL profiles configuration"
      }
    },
    "sslPolicy": {
      "type": "object",
      "defaultValue": {
        "policyType": "Predefined",
        "policyName": "AppGwSslPolicy20220101S"
      },
      "metadata": {
        "description": "SSL policy configuration"
      }
    },
    "frontendPorts": {
      "type": "array",
      "defaultValue": [
        {
          "name": "port-80",
          "port": 80
        },
        {
          "name": "port-443",
          "port": 443
        }
      ],
      "metadata": {
        "description": "Frontend ports configuration"
      }
    },
    "httpListeners": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default-http-listener",
          "frontendIPConfigurationName": "public-frontend",
          "frontendPortName": "port-80",
          "protocol": "Http",
          "hostName": "",
          "requireServerNameIndication": false,
          "sslCertificateName": "",
          "firewallPolicyId": ""
        }
      ],
      "metadata": {
        "description": "HTTP listeners configuration"
      }
    },
    "requestRoutingRules": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default-routing-rule",
          "ruleType": "Basic",
          "httpListenerName": "default-http-listener",
          "backendAddressPoolName": "default-backend-pool",
          "backendHttpSettingsName": "default-http-setting",
          "redirectConfigurationName": "",
          "urlPathMapName": "",
          "priority": 100
        }
      ],
      "metadata": {
        "description": "Request routing rules configuration"
      }
    },
    "urlPathMaps": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "URL path maps configuration"
      }
    },
    "redirectConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Redirect configurations"
      }
    },
    "healthProbes": {
      "type": "array",
      "defaultValue": [
        {
          "name": "default-health-probe",
          "protocol": "Http",
          "host": "",
          "path": "/health",
          "interval": 30,
          "timeout": 30,
          "unhealthyThreshold": 3,
          "pickHostNameFromBackendHttpSettings": true,
          "minServers": 0,
          "match": {
            "body": "",
            "statusCodes": [
              "200-399"
            ]
          }
        }
      ],
      "metadata": {
        "description": "Health probes configuration"
      }
    },
    "wafConfiguration": {
      "type": "object",
      "defaultValue": {
        "enabled": true,
        "firewallMode": "Prevention",
        "ruleSetType": "OWASP",
        "ruleSetVersion": "3.2",
        "fileUploadLimitInMb": 100,
        "requestBodyCheck": true,
        "maxRequestBodySizeInKb": 128,
        "disabledRuleGroups": [],
        "exclusions": []
      },
      "metadata": {
        "description": "Web Application Firewall configuration"
      }
    },
    "firewallPolicyId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Firewall policy resource ID (optional)"
      }
    },
    "rewriteRuleSets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Rewrite rule sets configuration"
      }
    },
    "customErrorConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Custom error configurations"
      }
    },
    "globalConfiguration": {
      "type": "object",
      "defaultValue": {
        "enableRequestBuffering": false,
        "enableResponseBuffering": false
      },
      "metadata": {
        "description": "Global configuration settings"
      }
    },
    "enableSystemManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable system assigned managed identity"
      }
    },
    "userAssignedIdentityIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "User assigned managed identity resource IDs"
      }
    },
    "privateLinkConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Private link configurations"
      }
    },
    "authenticationCertificates": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Authentication certificates configuration"
      }
    },
    "enableHttp2": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable HTTP/2"
      }
    },
    "enableFips": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable FIPS"
      }
    },
    "forceFirewallPolicyAssociation": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Force firewall policy association"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "backendAddressesFlattened",
        "count": "[length(parameters('backendPools'))]",
        "input": {
          "name": "[parameters('backendPools')[copyIndex('backendAddressesFlattened')].name]",
          "addresses": "[union(map(coalesce(tryGet(parameters('backendPools')[copyIndex('backendAddressesFlattened')], 'fqdns'), createArray()), lambda('fqdn', createObject('fqdn', lambdaVariables('fqdn')))), map(coalesce(tryGet(parameters('backendPools')[copyIndex('backendAddressesFlattened')], 'ipAddresses'), createArray()), lambda('ip', createObject('ipAddress', lambdaVariables('ip')))))]"
        }
      },
      {
        "name": "pathMapsProcessed",
        "count": "[length(parameters('urlPathMaps'))]",
        "input": {
          "name": "[parameters('urlPathMaps')[copyIndex('pathMapsProcessed')].name]",
          "defaultBackendPoolName": "[coalesce(tryGet(parameters('urlPathMaps')[copyIndex('pathMapsProcessed')], 'defaultBackendPoolName'), '')]",
          "defaultBackendHttpSettingsName": "[coalesce(tryGet(parameters('urlPathMaps')[copyIndex('pathMapsProcessed')], 'defaultBackendHttpSettingsName'), '')]",
          "defaultRedirectConfigurationName": "[coalesce(tryGet(parameters('urlPathMaps')[copyIndex('pathMapsProcessed')], 'defaultRedirectConfigurationName'), '')]",
          "defaultRewriteRuleSetName": "[coalesce(tryGet(parameters('urlPathMaps')[copyIndex('pathMapsProcessed')], 'defaultRewriteRuleSetName'), '')]",
          "pathRules": "[coalesce(tryGet(parameters('urlPathMaps')[copyIndex('pathMapsProcessed')], 'pathRules'), createArray())]"
        }
      }
    ],
    "identityType": "[if(and(parameters('enableSystemManagedIdentity'), not(empty(parameters('userAssignedIdentityIds')))), 'SystemAssigned, UserAssigned', if(parameters('enableSystemManagedIdentity'), 'SystemAssigned', 'UserAssigned'))]",
    "userAssignedIdentityDict": "[if(not(empty(parameters('userAssignedIdentityIds'))), reduce(parameters('userAssignedIdentityIds'), createObject(), lambda('acc', 'id', union(lambdaVariables('acc'), createObject(format('{0}', lambdaVariables('id')), createObject())))), createObject())]"
  },
  "resources": [
    {
      "condition": "[parameters('enableAppGateway')]",
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2024-05-01",
      "name": "[parameters('appGatewayName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "zones": "[parameters('availabilityZones')]",
      "identity": "[if(or(parameters('enableSystemManagedIdentity'), not(empty(parameters('userAssignedIdentityIds')))), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentityIds'))), variables('userAssignedIdentityDict'), null())), null())]",
      "properties": {
        "copy": [
          {
            "name": "frontendPorts",
            "count": "[length(parameters('frontendPorts'))]",
            "input": {
              "name": "[parameters('frontendPorts')[copyIndex('frontendPorts')].name]",
              "properties": {
                "port": "[parameters('frontendPorts')[copyIndex('frontendPorts')].port]"
              }
            }
          },
          {
            "name": "sslCertificates",
            "count": "[length(parameters('sslCertificates'))]",
            "input": {
              "name": "[parameters('sslCertificates')[copyIndex('sslCertificates')].name]",
              "properties": {
                "data": "[tryGet(parameters('sslCertificates')[copyIndex('sslCertificates')], 'data')]",
                "keyVaultSecretId": "[tryGet(parameters('sslCertificates')[copyIndex('sslCertificates')], 'keyVaultSecretId')]",
                "password": "[tryGet(parameters('sslCertificates')[copyIndex('sslCertificates')], 'password')]"
              }
            }
          },
          {
            "name": "trustedRootCertificates",
            "count": "[length(parameters('trustedRootCertificates'))]",
            "input": {
              "name": "[parameters('trustedRootCertificates')[copyIndex('trustedRootCertificates')].name]",
              "properties": {
                "data": "[tryGet(parameters('trustedRootCertificates')[copyIndex('trustedRootCertificates')], 'data')]",
                "keyVaultSecretId": "[tryGet(parameters('trustedRootCertificates')[copyIndex('trustedRootCertificates')], 'keyVaultSecretId')]"
              }
            }
          },
          {
            "name": "trustedClientCertificates",
            "count": "[length(parameters('trustedClientCertificates'))]",
            "input": {
              "name": "[parameters('trustedClientCertificates')[copyIndex('trustedClientCertificates')].name]",
              "properties": {
                "data": "[parameters('trustedClientCertificates')[copyIndex('trustedClientCertificates')].data]"
              }
            }
          },
          {
            "name": "authenticationCertificates",
            "count": "[length(parameters('authenticationCertificates'))]",
            "input": {
              "name": "[parameters('authenticationCertificates')[copyIndex('authenticationCertificates')].name]",
              "properties": {
                "data": "[parameters('authenticationCertificates')[copyIndex('authenticationCertificates')].data]"
              }
            }
          },
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('backendPools'))]",
            "input": {
              "name": "[parameters('backendPools')[copyIndex('backendAddressPools')].name]",
              "properties": {
                "backendAddresses": "[variables('backendAddressesFlattened')[copyIndex('backendAddressPools')].addresses]"
              }
            }
          },
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('backendHttpSettings'))]",
            "input": {
              "name": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].name]",
              "properties": {
                "port": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].port]",
                "protocol": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].protocol]",
                "cookieBasedAffinity": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'cookieBasedAffinity'), 'Disabled')]",
                "requestTimeout": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'requestTimeout'), 30)]",
                "connectionDraining": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'connectionDraining'), createObject('enabled', false(), 'drainTimeoutInSec', 0))]",
                "pickHostNameFromBackendAddress": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'pickHostNameFromBackendAddress'), false())]",
                "hostName": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'hostName'), '')]",
                "path": "[coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'path'), '')]",
                "probe": "[if(not(empty(coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'probeName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/probes', parameters('appGatewayName'), parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].probeName)), null())]",
                "trustedRootCertificates": "[if(not(empty(coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'trustedRootCertificateNames'), createArray()))), map(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].trustedRootCertificateNames, lambda('certName', createObject('id', resourceId('Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('appGatewayName'), lambdaVariables('certName'))))), createArray())]",
                "authenticationCertificates": "[if(not(empty(coalesce(tryGet(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'authenticationCertificateNames'), createArray()))), map(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].authenticationCertificateNames, lambda('certName', createObject('id', resourceId('Microsoft.Network/applicationGateways/authenticationCertificates', parameters('appGatewayName'), lambdaVariables('certName'))))), createArray())]"
              }
            }
          },
          {
            "name": "probes",
            "count": "[length(parameters('healthProbes'))]",
            "input": {
              "name": "[parameters('healthProbes')[copyIndex('probes')].name]",
              "properties": {
                "protocol": "[parameters('healthProbes')[copyIndex('probes')].protocol]",
                "host": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'host'), '')]",
                "path": "[parameters('healthProbes')[copyIndex('probes')].path]",
                "interval": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'interval'), 30)]",
                "timeout": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'timeout'), 30)]",
                "unhealthyThreshold": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'unhealthyThreshold'), 3)]",
                "pickHostNameFromBackendHttpSettings": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'pickHostNameFromBackendHttpSettings'), false())]",
                "minServers": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'minServers'), 0)]",
                "match": "[coalesce(tryGet(parameters('healthProbes')[copyIndex('probes')], 'match'), createObject('statusCodes', createArray('200-399')))]"
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('httpListeners'))]",
            "input": {
              "name": "[parameters('httpListeners')[copyIndex('httpListeners')].name]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].frontendIPConfigurationName)]"
                },
                "frontendPort": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].frontendPortName)]"
                },
                "protocol": "[parameters('httpListeners')[copyIndex('httpListeners')].protocol]",
                "hostName": "[coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'hostName'), '')]",
                "hostNames": "[coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'hostNames'), createArray())]",
                "requireServerNameIndication": "[coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'requireServerNameIndication'), false())]",
                "sslCertificate": "[if(not(empty(coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'sslCertificateName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/sslCertificates', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].sslCertificateName)), null())]",
                "sslProfile": "[if(not(empty(coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'sslProfileName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/sslProfiles', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].sslProfileName)), null())]",
                "firewallPolicy": "[if(not(empty(coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'firewallPolicyId'), ''))), createObject('id', parameters('httpListeners')[copyIndex('httpListeners')].firewallPolicyId), if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()))]",
                "customErrorConfigurations": "[coalesce(tryGet(parameters('httpListeners')[copyIndex('httpListeners')], 'customErrorConfigurations'), createArray())]"
              }
            }
          },
          {
            "name": "sslProfiles",
            "count": "[length(parameters('sslProfiles'))]",
            "input": {
              "name": "[parameters('sslProfiles')[copyIndex('sslProfiles')].name]",
              "properties": {
                "sslPolicy": "[coalesce(tryGet(parameters('sslProfiles')[copyIndex('sslProfiles')], 'sslPolicy'), parameters('sslPolicy'))]",
                "clientAuthConfiguration": "[tryGet(parameters('sslProfiles')[copyIndex('sslProfiles')], 'clientAuthConfiguration')]",
                "trustedClientCertificates": "[if(not(empty(coalesce(tryGet(parameters('sslProfiles')[copyIndex('sslProfiles')], 'trustedClientCertificateNames'), createArray()))), map(parameters('sslProfiles')[copyIndex('sslProfiles')].trustedClientCertificateNames, lambda('certName', createObject('id', resourceId('Microsoft.Network/applicationGateways/trustedClientCertificates', parameters('appGatewayName'), lambdaVariables('certName'))))), createArray())]"
              }
            }
          },
          {
            "name": "urlPathMaps",
            "count": "[length(parameters('urlPathMaps'))]",
            "input": {
              "name": "[parameters('urlPathMaps')[copyIndex('urlPathMaps')].name]",
              "properties": {
                "defaultBackendAddressPool": "[if(not(empty(variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultBackendPoolName)), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultBackendPoolName)), null())]",
                "defaultBackendHttpSettings": "[if(not(empty(variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultBackendHttpSettingsName)), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultBackendHttpSettingsName)), null())]",
                "defaultRedirectConfiguration": "[if(not(empty(variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultRedirectConfigurationName)), createObject('id', resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', parameters('appGatewayName'), variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultRedirectConfigurationName)), null())]",
                "defaultRewriteRuleSet": "[if(not(empty(variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultRewriteRuleSetName)), createObject('id', resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('appGatewayName'), variables('pathMapsProcessed')[copyIndex('urlPathMaps')].defaultRewriteRuleSetName)), null())]",
                "pathRules": "[variables('pathMapsProcessed')[copyIndex('urlPathMaps')].pathRules]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('requestRoutingRules'))]",
            "input": {
              "name": "[parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].name]",
              "properties": {
                "ruleType": "[parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].ruleType]",
                "priority": "[coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'priority'), 100)]",
                "httpListener": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].httpListenerName)]"
                },
                "backendAddressPool": "[if(and(equals(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].ruleType, 'Basic'), not(empty(coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'backendAddressPoolName'), '')))), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].backendAddressPoolName)), null())]",
                "backendHttpSettings": "[if(and(equals(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].ruleType, 'Basic'), not(empty(coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'backendHttpSettingsName'), '')))), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].backendHttpSettingsName)), null())]",
                "redirectConfiguration": "[if(not(empty(coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'redirectConfigurationName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].redirectConfigurationName)), null())]",
                "urlPathMap": "[if(and(equals(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].ruleType, 'PathBasedRouting'), not(empty(coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'urlPathMapName'), '')))), createObject('id', resourceId('Microsoft.Network/applicationGateways/urlPathMaps', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].urlPathMapName)), null())]",
                "rewriteRuleSet": "[if(not(empty(coalesce(tryGet(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')], 'rewriteRuleSetName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].rewriteRuleSetName)), null())]"
              }
            }
          },
          {
            "name": "redirectConfigurations",
            "count": "[length(parameters('redirectConfigurations'))]",
            "input": {
              "name": "[parameters('redirectConfigurations')[copyIndex('redirectConfigurations')].name]",
              "properties": {
                "redirectType": "[parameters('redirectConfigurations')[copyIndex('redirectConfigurations')].redirectType]",
                "targetUrl": "[tryGet(parameters('redirectConfigurations')[copyIndex('redirectConfigurations')], 'targetUrl')]",
                "targetListener": "[if(not(empty(coalesce(tryGet(parameters('redirectConfigurations')[copyIndex('redirectConfigurations')], 'targetListenerName'), ''))), createObject('id', resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('appGatewayName'), parameters('redirectConfigurations')[copyIndex('redirectConfigurations')].targetListenerName)), null())]",
                "includePath": "[coalesce(tryGet(parameters('redirectConfigurations')[copyIndex('redirectConfigurations')], 'includePath'), true())]",
                "includeQueryString": "[coalesce(tryGet(parameters('redirectConfigurations')[copyIndex('redirectConfigurations')], 'includeQueryString'), true())]"
              }
            }
          },
          {
            "name": "rewriteRuleSets",
            "count": "[length(parameters('rewriteRuleSets'))]",
            "input": {
              "name": "[parameters('rewriteRuleSets')[copyIndex('rewriteRuleSets')].name]",
              "properties": {
                "rewriteRules": "[parameters('rewriteRuleSets')[copyIndex('rewriteRuleSets')].rewriteRules]"
              }
            }
          },
          {
            "name": "privateLinkConfigurations",
            "count": "[length(parameters('privateLinkConfigurations'))]",
            "input": {
              "name": "[parameters('privateLinkConfigurations')[copyIndex('privateLinkConfigurations')].name]",
              "properties": {
                "ipConfigurations": "[if(not(empty(coalesce(tryGet(parameters('privateLinkConfigurations')[copyIndex('privateLinkConfigurations')], 'ipConfigurations'), createArray()))), map(parameters('privateLinkConfigurations')[copyIndex('privateLinkConfigurations')].ipConfigurations, lambda('ipConfig', createObject('name', lambdaVariables('ipConfig').name, 'properties', createObject('privateIPAddress', lambdaVariables('ipConfig').privateIPAddress, 'privateIPAllocationMethod', lambdaVariables('ipConfig').privateIPAllocationMethod, 'subnet', createObject('id', lambdaVariables('ipConfig').subnetId), 'primary', lambdaVariables('ipConfig').primary)))), createArray())]"
              }
            }
          }
        ],
        "sku": {
          "name": "[parameters('appGatewaySku')]",
          "tier": "[parameters('appGatewayTier')]"
        },
        "autoscaleConfiguration": {
          "minCapacity": "[parameters('capacity').minCapacity]",
          "maxCapacity": "[parameters('capacity').maxCapacity]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetResourceId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": "[concat(createArray(createObject('name', 'public-frontend', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'publicIPAddress', createObject('id', parameters('publicIpResourceId'))))), if(parameters('enablePrivateFrontend'), createArray(createObject('name', 'private-frontend', 'properties', createObject('privateIPAddress', parameters('privateFrontendIP'), 'privateIPAllocationMethod', if(empty(parameters('privateFrontendIP')), 'Dynamic', 'Static'), 'subnet', createObject('id', parameters('subnetResourceId'))))), createArray()))]",
        "sslPolicy": "[parameters('sslPolicy')]",
        "customErrorConfigurations": "[parameters('customErrorConfigurations')]",
        "globalConfiguration": "[parameters('globalConfiguration')]",
        "webApplicationFirewallConfiguration": "[if(and(equals(parameters('appGatewayTier'), 'WAF_v2'), not(parameters('wafConfiguration').enabled)), null(), if(equals(parameters('appGatewayTier'), 'WAF_v2'), createObject('enabled', parameters('wafConfiguration').enabled, 'firewallMode', parameters('wafConfiguration').firewallMode, 'ruleSetType', parameters('wafConfiguration').ruleSetType, 'ruleSetVersion', parameters('wafConfiguration').ruleSetVersion, 'fileUploadLimitInMb', coalesce(tryGet(parameters('wafConfiguration'), 'fileUploadLimitInMb'), 100), 'requestBodyCheck', coalesce(tryGet(parameters('wafConfiguration'), 'requestBodyCheck'), true()), 'maxRequestBodySizeInKb', coalesce(tryGet(parameters('wafConfiguration'), 'maxRequestBodySizeInKb'), 128), 'disabledRuleGroups', coalesce(tryGet(parameters('wafConfiguration'), 'disabledRuleGroups'), createArray()), 'exclusions', coalesce(tryGet(parameters('wafConfiguration'), 'exclusions'), createArray())), null()))]",
        "firewallPolicy": "[if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null())]",
        "forceFirewallPolicyAssociation": "[parameters('forceFirewallPolicyAssociation')]",
        "enableHttp2": "[parameters('enableHttp2')]",
        "enableFips": "[parameters('enableFips')]"
      }
    }
  ],
  "outputs": {
    "appGatewayId": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway resource ID"
      },
      "value": "[if(parameters('enableAppGateway'), resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '')]"
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway name"
      },
      "value": "[if(parameters('enableAppGateway'), parameters('appGatewayName'), '')]"
    },
    "appGatewayFqdn": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway FQDN - not available at deployment time"
      },
      "value": ""
    },
    "appGatewayPublicIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway public IP address - not available at deployment time"
      },
      "value": ""
    },
    "backendPoolNames": {
      "type": "array",
      "metadata": {
        "description": "Application Gateway backend pool names"
      },
      "value": "[if(parameters('enableAppGateway'), map(parameters('backendPools'), lambda('pool', lambdaVariables('pool').name)), createArray())]"
    },
    "frontendIPConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Application Gateway frontend IP configurations - available after deployment"
      },
      "value": []
    },
    "listenerNames": {
      "type": "array",
      "metadata": {
        "description": "Application Gateway listener names"
      },
      "value": "[if(parameters('enableAppGateway'), map(parameters('httpListeners'), lambda('listener', lambdaVariables('listener').name)), createArray())]"
    },
    "routingRuleNames": {
      "type": "array",
      "metadata": {
        "description": "Application Gateway routing rule names"
      },
      "value": "[if(parameters('enableAppGateway'), map(parameters('requestRoutingRules'), lambda('rule', lambdaVariables('rule').name)), createArray())]"
    },
    "operationalState": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway operational state"
      },
      "value": "[if(parameters('enableAppGateway'), coalesce(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01'), 'operationalState'), 'Unknown'), 'Disabled')]"
    },
    "systemAssignedIdentityPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway system assigned managed identity principal ID"
      },
      "value": "[if(and(parameters('enableAppGateway'), parameters('enableSystemManagedIdentity')), coalesce(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01', 'full').identity, 'principalId'), ''), '')]"
    },
    "configurationSummary": {
      "type": "object",
      "metadata": {
        "description": "Application Gateway configuration summary"
      },
      "value": "[if(parameters('enableAppGateway'), createObject('sku', createObject('name', reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01').sku.name, 'tier', reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01').sku.tier), 'capacity', createObject('min', coalesce(tryGet(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01'), 'autoscaleConfiguration'), 'minCapacity'), 0), 'max', coalesce(tryGet(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01'), 'autoscaleConfiguration'), 'maxCapacity'), 0)), 'wafEnabled', coalesce(tryGet(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01'), 'webApplicationFirewallConfiguration'), 'enabled'), false()), 'http2Enabled', coalesce(tryGet(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01'), 'enableHttp2'), false()), 'backendPoolCount', length(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01').backendAddressPools), 'listenerCount', length(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01').httpListeners), 'routingRuleCount', length(reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2024-05-01').requestRoutingRules)), createObject())]"
    }
  }
}