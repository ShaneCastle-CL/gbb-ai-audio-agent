# ---- Development Stage ----
# Use a specific Node.js LTS version on Alpine Linux for a small and secure image.
FROM node:slim

# Set the working directory in the container.
WORKDIR /app

# Copy package.json and package-lock.json.
# This allows Docker to cache the dependency layer if these files haven't changed.
COPY package.json package-lock.json* ./

# Copy the SSL root certificate into the container to make requests to backend
COPY root.cer /usr/local/share/ca-certificates/root.crt
RUN apt-get update && apt-get install -y ca-certificates && update-ca-certificates

# Install dependencies. 'npm ci' is recommended for reproducible builds.
# Ensure your lock file (package-lock.json) is committed to your repository.
RUN npm ci
# Or for Yarn: RUN yarn install --frozen-lockfile
# Or for PNPM: RUN pnpm install --frozen-lockfile

# Copy the rest of the application source code into the image.
# For `npm run dev` with hot-reloading, source code is typically volume-mounted from the host.
# This copy ensures the image has the code if not volume mounting, or for initial setup.
# Ensure you have a .dockerignore file to exclude node_modules, .git, etc.
COPY . .

# Copy the SSL root certificate into the container.

# Expose the port Vite dev server typically runs on (default 5173).
# This needs to match the port specified in your Vite config or dev script.
# Your docker-compose.yml maps host port 3000 to this container port.
EXPOSE 5173

# Set the default command to run the Vite development server.
# IMPORTANT: Ensure your "dev" script in package.json (e.g., "vite")
# is configured to listen on all network interfaces.
# Example package.json script: "dev": "vite --host 0.0.0.0 --port 5173"
# If not specified, Vite might only listen on localhost, making it inaccessible from outside the container.
CMD ["npm", "run", "dev"]