name: 🏗️ Deploy with Azure Developer CLI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: choice
        options:
          - provision  # Infrastructure only
          - deploy     # Application only (requires existing infrastructure)
          - up         # Both infrastructure and application
          - down       # Destroy everything
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: string
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: string
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string

env:
  # CI/CD mode configuration
  AZD_SKIP_INTERACTIVE: true
  CI: true
  GITHUB_ACTIONS: true
  RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group }}
  RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account }}
  RS_CONTAINER_NAME: ${{ inputs.rs_container_name }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout repository
  pull-requests: write  # Required to comment on PRs

jobs:
  # ============================================================================
  # TERRAFORM PLAN (for PRs only)
  # ============================================================================
  terraform-plan:
    name: 📋 Preview Changes (Terraform Plan)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: github.event_name == 'pull_request'
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ inputs.environment }}
      RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group }}
      RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account }}
      RS_CONTAINER_NAME: ${{ inputs.rs_container_name }}
      ARM_USE_OIDC: "true"
        
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: ⚙️ Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: 🔧 Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: 🔐 Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: ⚙️ Setup Terraform Parameters
        run: |
          echo "🔧 Setting up Terraform parameters..."
          
          # Base parameters from environment tfvars (use dev for PR previews)
          BASE_PARAMS=$(cat infra/terraform/params/main.tfvars.dev.json)
          echo "Base: $(echo "$BASE_PARAMS" | jq -c .)"
          
          # Add dynamic parameters
          FINAL_PARAMS=$(echo "$BASE_PARAMS" | jq \
            --arg env "dev" \
            --arg principal_type "ServicePrincipal" \
            '. + {
              environment_name: $env,
              principal_type: $principal_type
            }')
          
          echo "$FINAL_PARAMS" > infra/terraform/main.tfvars.json
          echo "✅ Parameters configured for environment: dev"

      - name: 🔧 Configure Terraform Backend
        run: |
          echo "🔧 Configuring Terraform backend..."
          echo "Backend: ${{ env.RS_STORAGE_ACCOUNT }}/${{ env.RS_CONTAINER_NAME }}/dev.tfstate"
          
          cat > infra/terraform/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.RS_RESOURCE_GROUP }}"
              storage_account_name = "${{ env.RS_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.RS_CONTAINER_NAME }}"
              key                  = "dev.tfstate"
              use_azuread_auth     = true
            }
          }
          EOF
          
          echo "✅ Backend configured"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: 📋 Run Terraform Plan via AZD
        id: plan
        run: |
          # Use azd to run terraform plan
          echo "🔍 Running infrastructure preview..."
          # Ensure the correct azd environment exists and is set
          ENV_NAME="${{ env.AZURE_ENV_NAME }}"
          if [ -z "$ENV_NAME" ]; then
            ENV_NAME="dev"
            echo "⚠️ AZURE_ENV_NAME not set, defaulting to 'dev'"
          fi
          if ! azd env list --output json | jq -e ".[] | select(.name==\"$ENV_NAME\")" > /dev/null; then
            echo "🔧 Creating azd environment: $ENV_NAME"
            azd env new "$ENV_NAME" --no-prompt
          fi
          azd env select "$ENV_NAME"

            # Persist resolved remote state values into the azd environment
            echo "🔧 Setting azd environment remote state variables from resolved values..."
            azd env set RS_RESOURCE_GROUP "${RS_RESOURCE_GROUP}"
            azd env set RS_STORAGE_ACCOUNT "${RS_STORAGE_ACCOUNT}"
            azd env set RS_CONTAINER_NAME "${RS_CONTAINER_NAME}"
            # Confirm azd env contains remote state values for RS_RESOURCE_GROUP, RS_STORAGE_ACCOUNT, RS_CONTAINER_NAME
            echo "🔍 Checking azd environment values for remote state variables..."
            azd env get-values > /tmp/azd-env-values.env
            source /tmp/azd-env-values.env

            missing=0
            for var in RS_RESOURCE_GROUP RS_STORAGE_ACCOUNT RS_CONTAINER_NAME; do
            value=$(grep "^$var=" /tmp/azd-env-values.env | cut -d'=' -f2-)
            if [ -z "$value" ]; then
              echo "❌ Missing required remote state variable: $var"
              missing=1
            else
              RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group || vars.TF_STATE_RESOURCE_GROUP || 'Default-ActivityLogAlerts' }}
              RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account || vars.TF_STATE_STORAGE_ACCOUNT || 'rtagent' }}
              RS_CONTAINER_NAME: ${{ inputs.rs_container_name || vars.TF_STATE_CONTAINER_NAME || 'tfstate' }}

          RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group || vars.TF_STATE_RESOURCE_GROUP || 'Default-ActivityLogAlerts' }}
          RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account || vars.TF_STATE_STORAGE_ACCOUNT || 'rtagent' }}
          RS_CONTAINER_NAME: ${{ inputs.rs_container_name || vars.TF_STATE_CONTAINER_NAME || 'tfstate' }}
            fi
            echo "✅ All required remote state variables are present in azd environment."
          azd provision --no-prompt --preview --environment "$ENV_NAME" || \
            azd provision --no-prompt --help | grep -i preview || \
            echo "⚠️ Plan preview not available, would provision infrastructure"
          echo "plan-available=true" >> $GITHUB_OUTPUT
        env:
          RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group || vars.TF_STATE_RESOURCE_GROUP || 'Default-ActivityLogAlerts' }}
          RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account || vars.TF_STATE_STORAGE_ACCOUNT || 'rtagent' }}
          RS_CONTAINER_NAME: ${{ inputs.rs_container_name || vars.TF_STATE_CONTAINER_NAME || 'tfstate' }}
          AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
      - name: 🧪 Generate Terraform Plan Output
        id: tfplan
        run: |
          set -e
          echo "🧪 Generating raw Terraform plan output..."
          cd infra/terraform
          terraform init -input=false -no-color
          # Create plan file with provided variables
          if ! terraform plan -input=false -no-color -var-file=main.tfvars.json -out=tfplan; then
            echo "Terraform plan failed. See previous step logs for details." > "$GITHUB_WORKSPACE/tfplan.txt"
            exit 0
          fi
          # Render plan to text
          if ! terraform show -no-color tfplan > "$GITHUB_WORKSPACE/tfplan.txt"; then
            echo "Could not render plan output with 'terraform show'." > "$GITHUB_WORKSPACE/tfplan.txt"
          fi
          echo "✅ Plan output ready"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          
      - name: 💬 Comment PR with Plan Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const escapeHtml = (s) => s
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');

            let planContent = '';
            try {
              planContent = fs.readFileSync('tfplan.txt', 'utf8');
            } catch (e) {
              planContent = 'Terraform plan output not available.';
            }

            // Truncate very long plans to keep comment size reasonable (~60k chars)
            const MAX_LEN = 60000;
            if (planContent.length > MAX_LEN) {
              planContent = planContent.slice(0, MAX_LEN) + "\n...\n[truncated]";
            }

            const planSection = `\n<details>\n<summary><strong>Terraform Plan</strong> (click to expand)</summary>\n\n<pre>\n${escapeHtml(planContent)}\n</pre>\n</details>\n`;

            const output = `## 🏗️ Azure Developer CLI Deployment Preview
            
            **Environment:** \`pr-preview\` (temporary)
            **Action:** Infrastructure provision preview
            **Provider:** Terraform via Azure Developer CLI
            
            ### 📋 Changes Summary
            - 🏗️ Infrastructure changes will be applied via \`azd provision\`
            - 🚀 Application changes will be deployed via \`azd deploy\`
            - 📦 Full deployment available via \`azd up\`
            
            ### 🔗 Resources
            - [Azure Developer CLI Documentation](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/)
            - [Project Configuration](./azure.yaml)
            
            **Note:** This is a preview - no actual resources will be created until merged to main.
            ${planSection}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });


  # ============================================================================
  # AZURE DEVELOPER CLI DEPLOYMENT
  # ============================================================================
  azd-deployment:
    name: 🚀 Deploy with AZD
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call'
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', inputs.environment)) || github.event_name == 'workflow_call' && fromJson(format('["{0}"]', inputs.environment)) || fromJson('["dev"]') }}
    
    environment: ${{ matrix.environment }}
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ matrix.environment }}
      RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group }}
      RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account }}
      RS_CONTAINER_NAME: ${{ inputs.rs_container_name }}
      ARM_USE_OIDC: "true"
    
    outputs:
      resource_group: ${{ steps.outputs.outputs.resource_group }}
      frontend_url: ${{ steps.outputs.outputs.frontend_url }}
      backend_url: ${{ steps.outputs.outputs.backend_url }}
      
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: ⚙️ Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: 🔧 Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: 🔐 Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: ⚙️ Setup Terraform Parameters
        run: |
          echo "🔧 Setting up Terraform parameters..."
          
          # Base parameters from environment tfvars
          BASE_PARAMS=$(cat infra/terraform/params/main.tfvars.${{ matrix.environment }}.json)
          echo "Base: $(echo "$BASE_PARAMS" | jq -c .)"
          
          # Add dynamic parameters
          FINAL_PARAMS=$(echo "$BASE_PARAMS" | jq \
            --arg env "${{ matrix.environment }}" \
            --arg principal_type "ServicePrincipal" \
            '. + {
              environment_name: $env,
              principal_type: $principal_type
            }')
          
          echo "$FINAL_PARAMS" > infra/terraform/main.tfvars.json
          echo "✅ Parameters configured for environment: ${{ matrix.environment }}"

      - name: 🔧 Configure Terraform Backend
        run: |
          echo "🔧 Configuring Terraform backend..."
          echo "Backend: ${{ env.RS_STORAGE_ACCOUNT }}/${{ env.RS_CONTAINER_NAME }}/${{ matrix.environment }}.tfstate"
          
          cat > infra/terraform/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.RS_RESOURCE_GROUP }}"
              storage_account_name = "${{ env.RS_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.RS_CONTAINER_NAME }}"
              key                  = "${{ matrix.environment }}.tfstate"
              use_azuread_auth     = true
            }
          }
          EOF
          echo "✅ Backend configured"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          
      - name: 🚀 Execute AZD Command
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          case "$ACTION" in
            "provision")
              echo "🏗️ Provisioning infrastructure only..."
              azd provision --no-prompt
              ;;
            "deploy")
              echo "📦 Deploying application only..."
              azd deploy --no-prompt
              ;;
            "up")
              echo "🚀 Provisioning infrastructure and deploying application..."
              azd up --no-prompt
              ;;
            "down")
              echo "💥 Destroying all resources..."
              azd down --force --purge --no-prompt
              ;;
            *)
              echo "❌ Unknown action: $ACTION"
              exit 1
              ;;
          esac
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          
      - name: 📤 Extract Deployment Outputs
        id: outputs
        if: inputs.action != 'down'
        run: |
          # Get azd environment values
          echo "🔍 Extracting deployment information..."
          
          # Try to get outputs from azd
          if azd env get-values > /tmp/azd-values.env 2>/dev/null; then
            source /tmp/azd-values.env
            
            # Extract common outputs
            echo "resource_group=${AZURE_RESOURCE_GROUP:-unknown}" >> $GITHUB_OUTPUT
            
            # Try to get service endpoints
            FRONTEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-client".endpoint // empty' || echo "")
            BACKEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-server".endpoint // empty' || echo "")
            
            echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
            echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not extract azd outputs"
            echo "resource_group=unknown" >> $GITHUB_OUTPUT
            echo "frontend_url=" >> $GITHUB_OUTPUT
            echo "backend_url=" >> $GITHUB_OUTPUT
          fi
          
      - name: 🔍 Show Deployment Status
        if: inputs.action != 'down'
        run: |
          echo "📊 Deployment Status:"
          azd show --output table || echo "⚠️ Could not show deployment status"
          
      - name: 🔓 Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP

      - name: 🚪 Logout
        if: always()
        run: |
          az logout
          
      - name: 📋 Deployment Summary
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          if [ "$ACTION" = "down" ]; then
            echo "## 💥 Resources Destroyed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Environment \`${{ matrix.environment }}\` has been destroyed using Azure Developer CLI." >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Environment | \`${{ matrix.environment }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Action | \`$ACTION\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Resource Group | \`${{ steps.outputs.outputs.resource_group }}\` |" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${{ steps.outputs.outputs.frontend_url }}" ]; then
              echo "| Frontend URL | [${{ steps.outputs.outputs.frontend_url }}](${{ steps.outputs.outputs.frontend_url }}) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${{ steps.outputs.outputs.backend_url }}" ]; then
              echo "| Backend URL | [${{ steps.outputs.outputs.backend_url }}](${{ steps.outputs.outputs.backend_url }}) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Test your application using the URLs above" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor resources in the [Azure Portal](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs with \`azd monitor\`" >> $GITHUB_STEP_SUMMARY
          fi
