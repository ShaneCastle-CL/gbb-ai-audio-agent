name: 🏗️ Deploy with Azure Developer CLI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: choice
        options:
          - provision  # Infrastructure only
          - deploy     # Application only (requires existing infrastructure)
          - up         # Both infrastructure and application
          - down       # Destroy everything
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: string
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: string
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - 'src/**'
      - 'apps/**'
      - 'azure.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - 'azure.yaml'

env:
  # CI/CD mode configuration
  AZD_SKIP_INTERACTIVE: true
  CI: true
  GITHUB_ACTIONS: true

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout repository
  pull-requests: write  # Required to comment on PRs

jobs:
  # ============================================================================
  # SHARED DEPLOYMENT JOB (handles both preview and deployment)
  # ============================================================================
  deploy:
    name: ${{ github.event_name == 'pull_request' && '📋 Preview Changes' || '🚀 Deploy with AZD' }}
    runs-on: ubuntu-latest
    
    # Environment selection logic
    environment: >-
      ${{
        github.event_name == 'pull_request' && 'dev' ||
        github.event_name == 'workflow_dispatch' && inputs.environment ||
        github.event_name == 'workflow_call' && inputs.environment ||
        'dev'
      }}
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # Environment name logic
      AZURE_ENV_NAME: >-
        ${{
          github.event_name == 'pull_request' && 'dev' ||
          github.event_name == 'workflow_dispatch' && inputs.environment ||
          github.event_name == 'workflow_call' && inputs.environment ||
          'dev'
        }}
      # Remote state fallback chain: inputs → repo vars → defaults
      RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group }}
      RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account }}
      RS_CONTAINER_NAME: ${{ inputs.rs_container_name }}
      ARM_USE_OIDC: "true"
    
    outputs:
      resource_group: ${{ steps.extract-outputs.outputs.resource_group }}
      frontend_url: ${{ steps.extract-outputs.outputs.frontend_url }}
      backend_url: ${{ steps.extract-outputs.outputs.backend_url }}
      
    steps:
      # ========================================================================
      # SHARED SETUP STEPS
      # ========================================================================
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: ⚙️ Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: 🔧 Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: 🔐 Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      # ========================================================================
      # SHARED CONFIGURATION STEPS
      # ========================================================================
      - name: ⚙️ Setup AZD Environment
        run: |
          echo "🔧 Setting up azd environment: ${{ env.AZURE_ENV_NAME }}"
          
          # Create or select azd environment
          if ! azd env list --output json | jq -e ".[] | select(.name==\"${{ env.AZURE_ENV_NAME }}\")" > /dev/null; then
            echo "🔧 Creating azd environment: ${{ env.AZURE_ENV_NAME }}"
            azd env new "${{ env.AZURE_ENV_NAME }}" --no-prompt
          fi
          azd env select "${{ env.AZURE_ENV_NAME }}"

          # Set remote state configuration in azd environment
          echo "🔧 Setting remote state configuration..."
          azd env set RS_RESOURCE_GROUP "${{ env.RS_RESOURCE_GROUP }}"
          azd env set RS_STORAGE_ACCOUNT "${{ env.RS_STORAGE_ACCOUNT }}"
          azd env set RS_CONTAINER_NAME "${{ env.RS_CONTAINER_NAME }}"
          
          echo "✅ AZD environment configured"

      - name: ⚙️ Setup Terraform Parameters
        run: |
          echo "🔧 Setting up Terraform parameters..."
          
          # Determine environment for tfvars
          TFVARS_ENV="${{ env.AZURE_ENV_NAME }}"
          if [ "$TFVARS_ENV" = "dev" ] && [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Using dev tfvars for PR preview"
          fi
          
          # Base parameters from environment tfvars
          BASE_PARAMS=$(cat "infra/terraform/params/main.tfvars.${TFVARS_ENV}.json")
          echo "Base: $(echo "$BASE_PARAMS" | jq -c .)"
          
          # Add dynamic parameters
          FINAL_PARAMS=$(echo "$BASE_PARAMS" | jq \
            --arg env "${{ env.AZURE_ENV_NAME }}" \
            --arg principal_type "ServicePrincipal" \
            --arg deployed_by "${GITHUB_ACTOR}" \
            '. + {
              environment_name: $env,
              principal_type: $principal_type,
              deployed_by: $deployed_by
            }')
          
          echo "$FINAL_PARAMS" > infra/terraform/main.tfvars.json
          echo "✅ Parameters configured for environment: ${{ env.AZURE_ENV_NAME }}"

      - name: 🔧 Configure Terraform Backend
        run: |
          echo "🔧 Configuring Terraform backend..."
          echo "Backend: ${{ env.RS_STORAGE_ACCOUNT }}/${{ env.RS_CONTAINER_NAME }}/${{ env.AZURE_ENV_NAME }}.tfstate"
          
          cat > infra/terraform/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.RS_RESOURCE_GROUP }}"
              storage_account_name = "${{ env.RS_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.RS_CONTAINER_NAME }}"
              key                  = "${{ env.AZURE_ENV_NAME }}.tfstate"
              use_azuread_auth     = true
            }
          }
          EOF
          
          echo "✅ Backend configured"

      # ========================================================================
      # PREVIEW MODE (for PRs)
      # ========================================================================
      - name: 📋 Run Infrastructure Preview
        if: github.event_name == 'pull_request'
        id: preview
        run: |
          echo "🔍 Running infrastructure preview via AZD..."
          
          # Validate azd environment contains required variables
          echo "🔍 Validating azd environment configuration..."
          azd env get-values > /tmp/azd-env-values.env
          
          missing=0
          for var in RS_RESOURCE_GROUP RS_STORAGE_ACCOUNT RS_CONTAINER_NAME; do
            if ! grep -q "^$var=" /tmp/azd-env-values.env; then
              echo "❌ Missing required remote state variable: $var"
              missing=1
            fi
          done
          
          if [ $missing -eq 0 ]; then
            echo "✅ All required remote state variables are present"
          else
            echo "❌ Some required remote state variables are missing"
            exit 1
          fi

          # Capture azd provision preview output
          echo "🔍 Running azd provision preview..."
          if azd provision --no-prompt --preview --environment "${{ env.AZURE_ENV_NAME }}" > "$GITHUB_WORKSPACE/azd-preview.txt" 2>&1; then
            echo "✅ AZD preview completed successfully"
            echo "preview-success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ AZD preview failed or not supported, output captured for review"
            echo "preview-success=false" >> $GITHUB_OUTPUT
          fi
          
          # Ensure we have some output for the PR comment
          if [ ! -s "$GITHUB_WORKSPACE/azd-preview.txt" ]; then
            echo "No preview output available from azd provision --preview" > "$GITHUB_WORKSPACE/azd-preview.txt"
          fi
          
          echo "✅ Preview output ready"
        
          
      - name: 💬 Comment PR with Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const escapeHtml = (s) => s
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');

            let previewContent = '';
            try {
              previewContent = fs.readFileSync('azd-preview.txt', 'utf8');
            } catch (e) {
              previewContent = 'Azure Developer CLI preview output not available.';
            }

            // Truncate very long previews
            const MAX_LEN = 60000;
            if (previewContent.length > MAX_LEN) {
              previewContent = previewContent.slice(0, MAX_LEN) + "\n...\n[truncated]";
            }

            const previewSection = `\n<details>\n<summary><strong>AZD Infrastructure Preview</strong> (click to expand)</summary>\n\n<pre>\n${escapeHtml(previewContent)}\n</pre>\n</details>\n`;

            const previewSuccess = '${{ steps.preview.outputs.preview-success }}' === 'true';
            const statusIcon = previewSuccess ? '✅' : '⚠️';
            const statusText = previewSuccess ? 'Preview completed successfully' : 'Preview completed with warnings (see details below)';

            const output = `## 🏗️ Infrastructure Preview ${statusIcon}
            
            **Environment:** \`dev\` (PR preview)
            **Action:** Infrastructure provision preview via Azure Developer CLI
            **Status:** ${statusText}
            
            ### 📋 Changes Summary
            - 🏗️ Infrastructure changes will be applied via \`azd provision\`
            - 🚀 Application changes will be deployed via \`azd deploy\`
            - 📦 Full deployment available via \`azd up\`
            
            ### 🛠️ Preview Details
            This preview was generated using \`azd provision --preview\` which shows what infrastructure changes would be made without actually creating or modifying resources.
            
            **Note:** This is a preview - no actual resources will be created until merged to main.
            ${previewSection}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      # ========================================================================
      # DEPLOYMENT MODE (for push/dispatch/call)
      # ========================================================================
      - name: 🚀 Execute AZD Command
        if: github.event_name != 'pull_request'
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          echo "🚀 Executing azd action: $ACTION"
          
          case "$ACTION" in
            "provision")
              echo "🏗️ Provisioning infrastructure only..."
              azd provision --no-prompt
              ;;
            "deploy")
              echo "📦 Deploying application only..."
              azd deploy --no-prompt
              ;;
            "up")
              echo "🚀 Provisioning infrastructure and deploying application..."
              azd up --no-prompt
              ;;
            "down")
              echo "💥 Destroying all resources..."
              azd down --force --purge --no-prompt
              ;;
            *)
              echo "❌ Unknown action: $ACTION"
              exit 1
              ;;
          esac
          
      - name: 📤 Extract Deployment Outputs
        id: extract-outputs
        if: github.event_name != 'pull_request' && inputs.action != 'down'
        run: |
          echo "🔍 Extracting deployment information..."
          
          # Get azd environment values
          if azd env get-values > /tmp/azd-values.env 2>/dev/null; then
            source /tmp/azd-values.env
            
            # Extract common outputs
            echo "resource_group=${AZURE_RESOURCE_GROUP:-unknown}" >> $GITHUB_OUTPUT
            
            # Try to get service endpoints
            FRONTEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-client".endpoint // empty' || echo "")
            BACKEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-server".endpoint // empty' || echo "")
            
            echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
            echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not extract azd outputs"
            echo "resource_group=unknown" >> $GITHUB_OUTPUT
            echo "frontend_url=" >> $GITHUB_OUTPUT
            echo "backend_url=" >> $GITHUB_OUTPUT
          fi
          
      - name: 🔍 Show Deployment Status
        if: github.event_name != 'pull_request' && inputs.action != 'down'
        run: |
          echo "📊 Deployment Status:"
          azd show --output table || echo "⚠️ Could not show deployment status"
          
      # ========================================================================
      # CLEANUP STEPS
      # ========================================================================
      - name: 🔓 Remove GitHub Runner IP from Whitelist
        if: always()
        continue-on-error: true
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP || echo "⚠️ Could not remove IP from whitelist"

      - name: 🚪 Logout
        if: always()
        run: |
          az logout
          
      - name: 📋 Generate Summary
        if: always()
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "## 📋 Infrastructure Preview Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Environment | \`dev\` (preview) |" >> $GITHUB_STEP_SUMMARY
            echo "| Action | Preview |" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          else
            ACTION="${{ inputs.action || 'up' }}"
            
            if [ "$ACTION" = "down" ]; then
              echo "## 💥 Resources Destroyed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Environment \`${{ env.AZURE_ENV_NAME }}\` has been destroyed using Azure Developer CLI." >> $GITHUB_STEP_SUMMARY
            else
              echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Environment | \`${{ env.AZURE_ENV_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| Action | \`$ACTION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| Resource Group | \`${{ steps.extract-outputs.outputs.resource_group }}\` |" >> $GITHUB_STEP_SUMMARY
              
              if [ -n "${{ steps.extract-outputs.outputs.frontend_url }}" ]; then
                echo "| Frontend URL | [${{ steps.extract-outputs.outputs.frontend_url }}](${{ steps.extract-outputs.outputs.frontend_url }}) |" >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ -n "${{ steps.extract-outputs.outputs.backend_url }}" ]; then
                echo "| Backend URL | [${{ steps.extract-outputs.outputs.backend_url }}](${{ steps.extract-outputs.outputs.backend_url }}) |" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Test your application using the URLs above" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor resources in the [Azure Portal](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY
              echo "- Check logs with \`azd monitor\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
