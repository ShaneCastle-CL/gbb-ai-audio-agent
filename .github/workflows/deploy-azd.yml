name: üèóÔ∏è Deploy with Azure Developer CLI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: choice
        options:
          - provision  # Infrastructure only
          - deploy     # Application only (requires existing infrastructure)
          - up         # Both infrastructure and application
          - down       # Destroy everything
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: string
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: string
  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - 'src/**'
      - 'apps/**'
      - 'azure.yaml'
      - '.github/workflows/deploy-azd.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - 'azure.yaml'
      - '.github/workflows/deploy-azd.yml'

env:
  # Azure environment configuration
  AZURE_LOCATION: eastus
  # CI/CD mode configuration
  AZD_SKIP_INTERACTIVE: true
  CI: true
  GITHUB_ACTIONS: true

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout repository
  pull-requests: write  # Required to comment on PRs

jobs:
  # ============================================================================
  # TERRAFORM PLAN (for PRs only)
  # ============================================================================
  terraform-plan:
    name: üìã Preview Changes (Terraform Plan)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      RS_RESOURCE_GROUP: ${{ vars.RS_RESOURCE_GROUP }}
      RS_STORAGE_ACCOUNT: ${{ vars.RS_STORAGE_ACCOUNT }}
      RS_CONTAINER_NAME: ${{ vars.RS_CONTAINER_NAME }}
      ARM_USE_OIDC: "true"
    
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîê Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: ‚öôÔ∏è Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: üîß Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: üîê Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: ‚öôÔ∏è Setup Terraform Parameters
        run: |
          echo "Setting up dev environment parameters for Terraform..."
          cp infra/terraform/params/main.tfvars.dev.json infra/terraform/main.tfvars.json
          
          # Update the JSON file with principal configuration
          echo "üîß Adding principal configuration to main.tfvars.json..."
          jq --arg principal_id "${{ env.AZURE_CLIENT_ID }}" \
             --arg principal_type "User" \
             '. + {principal_id: $principal_id, principal_type: $principal_type}' \
             infra/terraform/main.tfvars.json > infra/terraform/main.tfvars.json.tmp
          
          mv infra/terraform/main.tfvars.json.tmp infra/terraform/main.tfvars.json
          
          echo "‚úÖ Parameters copied and principal configuration added successfully"
          echo "üìã Current main.tfvars.json contents:"
          cat infra/terraform/main.tfvars.json
          
      - name: üèÅ Initialize AZD Environment
        run: |
          # Create a temporary environment for planning
          echo "üîç Creating temporary azd environment for PR preview..."
          
          # Ensure we're authenticated
          az account show --query "name" -o tsv || {
            echo "‚ùå Azure authentication failed"
            exit 1
          }
          
          # Prioritize location from main.tfvars.json if available
          TFVARS_LOCATION=$(jq -r '.location // empty' infra/terraform/main.tfvars.json)
          if [ -n "$TFVARS_LOCATION" ] && [ "$TFVARS_LOCATION" != "null" ]; then
            DEPLOY_LOCATION="$TFVARS_LOCATION"
            echo "‚úÖ Using location from main.tfvars.json: $TFVARS_LOCATION"
          else
            DEPLOY_LOCATION="${{ env.AZURE_LOCATION }}"
            echo "‚úÖ Using location from environment variable: ${{ env.AZURE_LOCATION }}"
          fi
          
          # Create the environment
          azd env new pr-preview --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} --location "$DEPLOY_LOCATION" || {
            echo "‚ùå Failed to create azd environment"
            echo "üîç Available environments:"
            azd env list || echo "No environments found"
            exit 1
          }
          
          echo "‚úÖ Environment 'pr-preview' created successfully"
          
          # Set required environment variables
          azd env set AZURE_ENV_NAME pr-preview
          azd env set AZURE_LOCATION "$DEPLOY_LOCATION"
          azd env set AZURE_SUBSCRIPTION_ID ${{ env.AZURE_SUBSCRIPTION_ID }}
          
          # Set Terraform principal configuration
          azd env set PRINCIPAL_ID "${{ env.AZURE_CLIENT_ID }}"
          azd env set PRINCIPAL_TYPE "User"
          echo "‚úÖ Set AZURE_PRINCIPAL_ID to client ID"
          echo "‚úÖ Set AZURE_PRINCIPAL_TYPE to User"
          
          # Set optional variables if available
          if [ -n "${{ secrets.ACS_SOURCE_PHONE_NUMBER }}" ]; then
            azd env set ACS_SOURCE_PHONE_NUMBER "${{ secrets.ACS_SOURCE_PHONE_NUMBER }}"
            echo "‚úÖ Set ACS_SOURCE_PHONE_NUMBER"
          fi
          
          # Set Terraform backend configuration
          azd env set RS_RESOURCE_GROUP "${{ env.RS_RESOURCE_GROUP }}"
          azd env set RS_STORAGE_ACCOUNT "${{ env.RS_STORAGE_ACCOUNT }}"
          azd env set RS_CONTAINER_NAME "${{ env.RS_CONTAINER_NAME }}"
          
          echo "üéØ Environment variables configured successfully"
          
      - name: üìã Run Terraform Plan via AZD
        id: plan
        run: |
          # Use azd to run terraform plan
          echo "üîç Running infrastructure preview..."
          
          # Run azd provision with --preview flag if available, otherwise show what would be deployed
          azd provision --no-prompt --preview || azd provision --no-prompt --help | grep -i preview || echo "‚ö†Ô∏è Plan preview not available, would provision infrastructure"
          
          echo "plan-available=true" >> $GITHUB_OUTPUT
          
      - name: üí¨ Comment PR with Plan Summary
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## üèóÔ∏è Azure Developer CLI Deployment Preview
            
            **Environment:** \`pr-preview\` (temporary)
            **Action:** Infrastructure provision preview
            **Provider:** Terraform via Azure Developer CLI
            
            ### üìã Changes Summary
            - üèóÔ∏è Infrastructure changes will be applied via \`azd provision\`
            - üöÄ Application changes will be deployed via \`azd deploy\`
            - üì¶ Full deployment available via \`azd up\`
            
            ### üîó Resources
            - [Azure Developer CLI Documentation](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/)
            - [Project Configuration](./azure.yaml)
            
            **Note:** This is a preview - no actual resources will be created until merged to main.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # ============================================================================
  # AZURE DEVELOPER CLI DEPLOYMENT
  # ============================================================================
  azd-deployment:
    name: üöÄ Deploy with AZD
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call'
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', inputs.environment)) || github.event_name == 'workflow_call' && fromJson(format('["{0}"]', inputs.environment)) || fromJson('["dev"]') }}
    
    environment: ${{ matrix.environment }}
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      RS_RESOURCE_GROUP: ${{ vars.RS_RESOURCE_GROUP }}
      RS_STORAGE_ACCOUNT: ${{ vars.RS_STORAGE_ACCOUNT }}
      RS_CONTAINER_NAME: ${{ vars.RS_CONTAINER_NAME }}
      ARM_USE_OIDC: "true"
    
    outputs:
      resource_group: ${{ steps.outputs.outputs.resource_group }}
      frontend_url: ${{ steps.outputs.outputs.frontend_url }}
      backend_url: ${{ steps.outputs.outputs.backend_url }}
      
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîê Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          
      - name: ‚öôÔ∏è Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: üîß Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: üîê Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: üîí Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP

      - name: ‚öôÔ∏è Setup Terraform Parameters
        run: |
          echo "Setting up ${{ matrix.environment }} environment parameters for Terraform..."
          if [ -f "infra/terraform/params/main.tfvars.${{ matrix.environment }}.json" ]; then
            cp infra/terraform/params/main.tfvars.${{ matrix.environment }}.json infra/terraform/main.tfvars.json
            echo "Parameters for ${{ matrix.environment }} copied successfully"
          else
            echo "‚ö†Ô∏è No specific parameters found for ${{ matrix.environment }}, using existing main.tfvars.json"
          fi
          
          # Update the JSON file with principal configuration
          echo "üîß Adding principal configuration to main.tfvars.json..."
          jq --arg principal_id "${{ env.AZURE_CLIENT_ID }}" \
             --arg principal_type "User" \
             '. + {principal_id: $principal_id, principal_type: $principal_type}' \
             infra/terraform/main.tfvars.json > infra/terraform/main.tfvars.json.tmp
          
          mv infra/terraform/main.tfvars.json.tmp infra/terraform/main.tfvars.json
          
          echo "‚úÖ Principal configuration added to main.tfvars.json"
          echo "üìã Current main.tfvars.json contents:"
          cat infra/terraform/main.tfvars.json
          
      - name: üèÅ Initialize AZD Environment
        run: |
          # Ensure we're authenticated
          echo "üîç Verifying Azure authentication..."
          az account show --query "name" -o tsv || {
            echo "‚ùå Azure authentication failed"
            exit 1
          }
          
          # Prioritize location from main.tfvars.json if available
          TFVARS_LOCATION=$(jq -r '.location // empty' infra/terraform/main.tfvars.json)
          if [ -n "$TFVARS_LOCATION" ] && [ "$TFVARS_LOCATION" != "null" ]; then
            DEPLOY_LOCATION="$TFVARS_LOCATION"
            echo "‚úÖ Using location from main.tfvars.json: $TFVARS_LOCATION"
          else
            DEPLOY_LOCATION="${{ env.AZURE_LOCATION }}"
            echo "‚úÖ Using location from environment variable: ${{ env.AZURE_LOCATION }}"
          fi
          
          # Check if environment exists, create if not
          echo "üîç Checking for existing azd environment: ${{ matrix.environment }}"
          if ! azd env list 2>/dev/null | grep -q "${{ matrix.environment }}"; then
            echo "Creating new azd environment: ${{ matrix.environment }}"
            azd env new ${{ matrix.environment }} --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} --location "$DEPLOY_LOCATION" || {
              echo "‚ùå Failed to create azd environment"
              echo "üîç Available environments:"
              azd env list || echo "No environments found"
              exit 1
            }
            echo "‚úÖ Environment '${{ matrix.environment }}' created successfully"
          else
            echo "Using existing azd environment: ${{ matrix.environment }}"
            azd env select ${{ matrix.environment }} || {
              echo "‚ùå Failed to select environment"
              exit 1
            }
            echo "‚úÖ Environment '${{ matrix.environment }}' selected successfully"
          fi
          
          # Set required environment variables
          echo "üîß Configuring environment variables..."
          azd env set AZURE_ENV_NAME ${{ matrix.environment }}
          azd env set AZURE_LOCATION "$DEPLOY_LOCATION"
          azd env set AZURE_SUBSCRIPTION_ID ${{ env.AZURE_SUBSCRIPTION_ID }}
          
          # Set Terraform principal configuration
          azd env set AZURE_PRINCIPAL_ID "${{ env.AZURE_CLIENT_ID }}"
          azd env set AZURE_PRINCIPAL_TYPE "User"
          echo "‚úÖ Set AZURE_PRINCIPAL_ID to client ID"
          echo "‚úÖ Set AZURE_PRINCIPAL_TYPE to User"
          
          # Set optional variables if available
          if [ -n "${{ secrets.ACS_SOURCE_PHONE_NUMBER }}" ]; then
            azd env set ACS_SOURCE_PHONE_NUMBER "${{ secrets.ACS_SOURCE_PHONE_NUMBER }}"
            echo "‚úÖ Set ACS_SOURCE_PHONE_NUMBER"
          fi
          
          # Set Terraform backend configuration
          azd env set TF_STATE_RESOURCE_GROUP "${{ env.RS_RESOURCE_GROUP }}"
          azd env set TF_STATE_STORAGE_ACCOUNT "${{ env.RS_STORAGE_ACCOUNT }}"
          azd env set TF_STATE_CONTAINER_NAME "${{ env.RS_CONTAINER_NAME }}"
          
          echo "üéØ Environment variables configured successfully"
          
          # Show current environment status
          echo "üìä Current azd environment status:"
          azd env list
          
      - name: üöÄ Execute AZD Command
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          case "$ACTION" in
            "provision")
              echo "üèóÔ∏è Provisioning infrastructure only..."
              azd provision --no-prompt
              ;;
            "deploy")
              echo "üì¶ Deploying application only..."
              azd deploy --no-prompt
              ;;
            "up")
              echo "üöÄ Provisioning infrastructure and deploying application..."
              azd up --no-prompt
              ;;
            "down")
              echo "üí• Destroying all resources..."
              azd down --force --purge --no-prompt
              ;;
            *)
              echo "‚ùå Unknown action: $ACTION"
              exit 1
              ;;
          esac
          
      - name: üì§ Extract Deployment Outputs
        id: outputs
        if: inputs.action != 'down'
        run: |
          # Get azd environment values
          echo "üîç Extracting deployment information..."
          
          # Try to get outputs from azd
          if azd env get-values > /tmp/azd-values.env 2>/dev/null; then
            source /tmp/azd-values.env
            
            # Extract common outputs
            echo "resource_group=${AZURE_RESOURCE_GROUP:-unknown}" >> $GITHUB_OUTPUT
            
            # Try to get service endpoints
            FRONTEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-client".endpoint // empty' || echo "")
            BACKEND_URL=$(azd show --output json 2>/dev/null | jq -r '.services."rtaudio-server".endpoint // empty' || echo "")
            
            echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
            echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Could not extract azd outputs"
            echo "resource_group=unknown" >> $GITHUB_OUTPUT
            echo "frontend_url=" >> $GITHUB_OUTPUT
            echo "backend_url=" >> $GITHUB_OUTPUT
          fi
          
      - name: üîç Show Deployment Status
        if: inputs.action != 'down'
        run: |
          echo "üìä Deployment Status:"
          azd show --output table || echo "‚ö†Ô∏è Could not show deployment status"
          
      - name: üîì Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP

      - name: üö™ Logout
        if: always()
        run: |
          az logout
          
      - name: üìã Deployment Summary
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          if [ "$ACTION" = "down" ]; then
            echo "## üí• Resources Destroyed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Environment \`${{ matrix.environment }}\` has been destroyed using Azure Developer CLI." >> $GITHUB_STEP_SUMMARY
          else
            echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Environment | \`${{ matrix.environment }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Action | \`$ACTION\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Resource Group | \`${{ steps.outputs.outputs.resource_group }}\` |" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "${{ steps.outputs.outputs.frontend_url }}" ]; then
              echo "| Frontend URL | [${{ steps.outputs.outputs.frontend_url }}](${{ steps.outputs.outputs.frontend_url }}) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "${{ steps.outputs.outputs.backend_url }}" ]; then
              echo "| Backend URL | [${{ steps.outputs.outputs.backend_url }}](${{ steps.outputs.outputs.backend_url }}) |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Test your application using the URLs above" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor resources in the [Azure Portal](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs with \`azd monitor\`" >> $GITHUB_STEP_SUMMARY
          fi
