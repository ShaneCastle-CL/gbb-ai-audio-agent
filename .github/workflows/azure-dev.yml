# Run when commits are pushed to cleanup/deployment
on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - cleanup/deployment

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      RS_RESOURCE_GROUP: ${{ vars.RS_RESOURCE_GROUP }}
      RS_STORAGE_ACCOUNT: ${{ vars.RS_STORAGE_ACCOUNT }}
      RS_CONTAINER_NAME: ${{ vars.RS_CONTAINER_NAME }}
      ARM_USE_OIDC: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0
          
      - name: Azure CLI Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Log in with Azure Developer CLI (OIDC)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP
            # sleep 300

      - name: Setup Terraform Parameters
        run: |
          echo "Setting up dev environment parameters for Terraform..."
          cp infra/terraform/params/main.tfvars.dev.json infra/terraform/main.tfvars.json
          
          # Get the Object ID (Principal ID) from the Client ID
          echo "🔍 Getting principal Object ID from Client ID..."
          PRINCIPAL_OBJECT_ID=$(az ad sp show --id "${{ env.AZURE_CLIENT_ID }}" --query objectId --output tsv)
          echo "✅ Principal Object ID: $PRINCIPAL_OBJECT_ID"
          
          # Update the JSON file with principal configuration
          echo "🔧 Adding principal configuration to main.tfvars.json..."
          jq --arg principal_id "$PRINCIPAL_OBJECT_ID" \
             --arg principal_type "ServicePrincipal" \
             '. + {principal_id: $principal_id, principal_type: $principal_type}' \
             infra/terraform/main.tfvars.json > infra/terraform/main.tfvars.json.tmp
          
          mv infra/terraform/main.tfvars.json.tmp infra/terraform/main.tfvars.json
          
          echo "✅ Parameters copied and principal configuration added successfully"

      - name: Configure Terraform Backend
        run: |
          echo "🔧 Configuring Terraform backend for remote state..."
          
          # Set required Terraform ARM environment variables for OIDC
          export ARM_CLIENT_ID="${{ env.AZURE_CLIENT_ID }}"
          export ARM_TENANT_ID="${{ env.AZURE_TENANT_ID }}"
          export ARM_SUBSCRIPTION_ID="${{ env.AZURE_SUBSCRIPTION_ID }}"
          export ARM_USE_OIDC=true
          
          echo "✅ ARM environment variables configured for OIDC authentication"
          
          cat > infra/terraform/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.RS_RESOURCE_GROUP }}"
              storage_account_name = "${{ env.RS_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.RS_CONTAINER_NAME }}"
              key                  = "${{ env.AZURE_ENV_NAME }}.tfstate"
              use_azuread_auth     = true
            }
          }
          EOF
          echo "✅ Backend configuration created successfully"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Configure AZD Environment
        run: |
          echo "🔧 Configuring AZD environment variables..."
          
          # Prioritize location from main.tfvars.json if available
          TFVARS_LOCATION=$(jq -r '.location // empty' infra/terraform/main.tfvars.json)
          if [ -n "$TFVARS_LOCATION" ] && [ "$TFVARS_LOCATION" != "null" ]; then
            azd env set AZURE_LOCATION "$TFVARS_LOCATION" || echo "Setting AZURE_LOCATION from tfvars"
            echo "✅ Using location from main.tfvars.json: $TFVARS_LOCATION"
          else
            azd env set AZURE_LOCATION "${{ env.AZURE_LOCATION }}" || echo "Setting AZURE_LOCATION from env"
            echo "✅ Using location from environment variable: ${{ env.AZURE_LOCATION }}"
          fi
          
          # Get the Object ID (Principal ID) from the Client ID for azd environment
          echo "🔍 Getting principal Object ID for azd environment..."
          PRINCIPAL_OBJECT_ID=$(az ad sp show --id "${{ env.AZURE_CLIENT_ID }}" --query objectId --output tsv)
          
          # Set Terraform principal configuration
          azd env set AZURE_PRINCIPAL_ID "$PRINCIPAL_OBJECT_ID" || echo "Setting AZURE_PRINCIPAL_ID"
          azd env set AZURE_PRINCIPAL_TYPE "ServicePrincipal" || echo "Setting AZURE_PRINCIPAL_TYPE"
          echo "✅ Principal and location configuration set for Terraform"

      - name: Provision Infrastructure
        run: azd provision --no-prompt
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Deploy Application
        run: azd deploy --no-prompt
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove  \
              --resource-group "${{ env.RS_RESOURCE_GROUP }}" \
              --account-name "${{ env.RS_STORAGE_ACCOUNT }}" \
              --ip-address $agentIP

      - name: logout
        if: always()
        run: |
          az logout